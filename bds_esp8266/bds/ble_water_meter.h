/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3139.0) */

#ifndef BLE_WATER_METER_H__
#define BLE_WATER_METER_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Water meter event type. */
typedef enum
{ 
    BLE_WATER_METER_HOT_WATER_EVT_NOTIFICATION_ENABLED,  /**< Hot water value notification enabled event. */
    BLE_WATER_METER_HOT_WATER_EVT_NOTIFICATION_DISABLED, /**< Hot water value notification disabled event. */
    BLE_WATER_METER_HOT_WATER_EVT_CCCD_WRITE, /**< Hot water CCCD write event. */
    BLE_WATER_METER_HOT_WATER_EVT_WRITE, /**< Hot water write event. */
    BLE_WATER_METER_COLD_WATER_EVT_NOTIFICATION_ENABLED,  /**< Cold water value notification enabled event. */
    BLE_WATER_METER_COLD_WATER_EVT_NOTIFICATION_DISABLED, /**< Cold water value notification disabled event. */
    BLE_WATER_METER_COLD_WATER_EVT_CCCD_WRITE, /**< Cold water CCCD write event. */
    BLE_WATER_METER_COLD_WATER_EVT_WRITE, /**< Cold water write event. */
} ble_water_meter_evt_type_t;

// Forward declaration of the ble_water_meter_t type.
typedef struct ble_water_meter_s ble_water_meter_t;








/**@brief Hot water structure. */
typedef struct
{
    uint32_t meters_per_cube;
} ble_water_meter_hot_water_t;
/**@brief Cold water structure. */
typedef struct
{
    uint32_t meters_per_cube;
} ble_water_meter_cold_water_t;

/**@brief Water meter Service event. */
typedef struct
{
    ble_water_meter_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_water_meter_hot_water_t hot_water; /**< Holds decoded data in Write event handler. */
        ble_water_meter_cold_water_t cold_water; /**< Holds decoded data in Write event handler. */
    } params;
} ble_water_meter_evt_t;

/**@brief Water meter Service event handler type. */
typedef void (*ble_water_meter_evt_handler_t) (ble_water_meter_t * p_water_meter, ble_water_meter_evt_t * p_evt);

/**@brief Water meter Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_water_meter_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Water meter Service. */
    ble_water_meter_hot_water_t ble_water_meter_hot_water_initial_value; /**< If not NULL, initial value of the Hot water characteristic. */ 
    ble_water_meter_cold_water_t ble_water_meter_cold_water_initial_value; /**< If not NULL, initial value of the Cold water characteristic. */ 
} ble_water_meter_init_t;

/**@brief Water meter Service structure. This contains various status information for the service.*/
struct ble_water_meter_s
{
    ble_water_meter_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Water meter Service. */
    uint16_t service_handle; /**< Handle of Water meter Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t hot_water_handles; /**< Handles related to the Hot water characteristic. */
    ble_gatts_char_handles_t cold_water_handles; /**< Handles related to the Cold water characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Water meter.
 *
 * @param[out]  p_water_meter       Water meter Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_water_meter_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_water_meter_init(ble_water_meter_t * p_water_meter, const ble_water_meter_init_t * p_water_meter_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_water_meter_on_ble_evt(ble_water_meter_t * p_water_meter, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Hot water.
 *
 * @details Sets a new value of the Hot water characteristic. The new value will be sent
 *          to the client the next time the client reads the Hot water characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_water_meter                 Water meter Service structure.
 * @param[in]   p_hot_water  New Hot water.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_water_meter_hot_water_set(ble_water_meter_t * p_water_meter, ble_water_meter_hot_water_t * p_hot_water);

/**@brief Function for sending the Hot water.
 *
 * @details The application calls this function after having performed a hot water.
 *          The hot water data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_water_meter                    Water meter Service structure.
 * @param[in]   p_hot_water               New hot water.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_water_meter_hot_water_send(ble_water_meter_t * p_water_meter, ble_water_meter_hot_water_t * p_hot_water);

/**@brief Function for setting the Cold water.
 *
 * @details Sets a new value of the Cold water characteristic. The new value will be sent
 *          to the client the next time the client reads the Cold water characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_water_meter                 Water meter Service structure.
 * @param[in]   p_cold_water  New Cold water.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_water_meter_cold_water_set(ble_water_meter_t * p_water_meter, ble_water_meter_cold_water_t * p_cold_water);

/**@brief Function for sending the Cold water.
 *
 * @details The application calls this function after having performed a cold water.
 *          The cold water data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_water_meter                    Water meter Service structure.
 * @param[in]   p_cold_water               New cold water.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_water_meter_cold_water_send(ble_water_meter_t * p_water_meter, ble_water_meter_cold_water_t * p_cold_water);

#endif //_BLE_WATER_METER_H__
