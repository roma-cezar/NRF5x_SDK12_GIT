/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3139.0) */

#ifndef BLE_METER_H__
#define BLE_METER_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief METER event type. */
typedef enum
{ 
    BLE_METER_HOT_EVT_NOTIFICATION_ENABLED,  /**< HOT value notification enabled event. */
    BLE_METER_HOT_EVT_NOTIFICATION_DISABLED, /**< HOT value notification disabled event. */
    BLE_METER_HOT_EVT_CCCD_WRITE, /**< HOT CCCD write event. */
    BLE_METER_HOT_EVT_WRITE, /**< HOT write event. */
    BLE_METER_COLD_EVT_NOTIFICATION_ENABLED,  /**< COLD value notification enabled event. */
    BLE_METER_COLD_EVT_NOTIFICATION_DISABLED, /**< COLD value notification disabled event. */
    BLE_METER_COLD_EVT_CCCD_WRITE, /**< COLD CCCD write event. */
    BLE_METER_COLD_EVT_WRITE, /**< COLD write event. */
} ble_meter_evt_type_t;

// Forward declaration of the ble_meter_t type.
typedef struct ble_meter_s ble_meter_t;








/**@brief HOT structure. */
typedef struct
{
    uint32_t hot;
} ble_meter_hot_t;
/**@brief COLD structure. */
typedef struct
{
    uint32_t cold;
} ble_meter_cold_t;

/**@brief METER Service event. */
typedef struct
{
    ble_meter_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_meter_hot_t hot; /**< Holds decoded data in Write event handler. */
        ble_meter_cold_t cold; /**< Holds decoded data in Write event handler. */
    } params;
} ble_meter_evt_t;

/**@brief METER Service event handler type. */
typedef void (*ble_meter_evt_handler_t) (ble_meter_t * p_meter, ble_meter_evt_t * p_evt);

/**@brief METER Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_meter_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the METER Service. */
    ble_meter_hot_t ble_meter_hot_initial_value; /**< If not NULL, initial value of the HOT characteristic. */ 
    ble_meter_cold_t ble_meter_cold_initial_value; /**< If not NULL, initial value of the COLD characteristic. */ 
} ble_meter_init_t;

/**@brief METER Service structure. This contains various status information for the service.*/
struct ble_meter_s
{
    ble_meter_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the METER Service. */
    uint16_t service_handle; /**< Handle of METER Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t hot_handles; /**< Handles related to the HOT characteristic. */
    ble_gatts_char_handles_t cold_handles; /**< Handles related to the COLD characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the METER.
 *
 * @param[out]  p_meter       METER Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_meter_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_meter_init(ble_meter_t * p_meter, const ble_meter_init_t * p_meter_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_meter_on_ble_evt(ble_meter_t * p_meter, ble_evt_t * p_ble_evt);

/**@brief Function for setting the HOT.
 *
 * @details Sets a new value of the HOT characteristic. The new value will be sent
 *          to the client the next time the client reads the HOT characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_meter                 METER Service structure.
 * @param[in]   p_hot  New HOT.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_meter_hot_set(ble_meter_t * p_meter, ble_meter_hot_t * p_hot);

/**@brief Function for sending the HOT.
 *
 * @details The application calls this function after having performed a hot.
 *          The hot data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_meter                    METER Service structure.
 * @param[in]   p_hot               New hot.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_meter_hot_send(ble_meter_t * p_meter, ble_meter_hot_t * p_hot);

/**@brief Function for setting the COLD.
 *
 * @details Sets a new value of the COLD characteristic. The new value will be sent
 *          to the client the next time the client reads the COLD characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_meter                 METER Service structure.
 * @param[in]   p_cold  New COLD.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_meter_cold_set(ble_meter_t * p_meter, ble_meter_cold_t * p_cold);

/**@brief Function for sending the COLD.
 *
 * @details The application calls this function after having performed a cold.
 *          The cold data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_meter                    METER Service structure.
 * @param[in]   p_cold               New cold.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_meter_cold_send(ble_meter_t * p_meter, ble_meter_cold_t * p_cold);

#endif //_BLE_METER_H__
