/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.1.3139.0) */

#ifndef BLE_CLOCK_H__
#define BLE_CLOCK_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief CLOCK event type. */
typedef enum
{ 
    BLE_CLOCK_HOURS_EVT_NOTIFICATION_ENABLED,  /**< HOURS value notification enabled event. */
    BLE_CLOCK_HOURS_EVT_NOTIFICATION_DISABLED, /**< HOURS value notification disabled event. */
    BLE_CLOCK_HOURS_EVT_WRITE, /**< HOURS write event. */
    BLE_CLOCK_MINUTES_EVT_NOTIFICATION_ENABLED,  /**< MINUTES value notification enabled event. */
    BLE_CLOCK_MINUTES_EVT_NOTIFICATION_DISABLED, /**< MINUTES value notification disabled event. */
    BLE_CLOCK_MINUTES_EVT_WRITE, /**< MINUTES write event. */
    BLE_CLOCK_SECONDS_EVT_NOTIFICATION_ENABLED,  /**< SECONDS value notification enabled event. */
    BLE_CLOCK_SECONDS_EVT_NOTIFICATION_DISABLED, /**< SECONDS value notification disabled event. */
    BLE_CLOCK_SECONDS_EVT_WRITE, /**< SECONDS write event. */
} ble_clock_evt_type_t;

// Forward declaration of the ble_clock_t type.
typedef struct ble_clock_s ble_clock_t;








/**@brief HOURS structure. */
typedef struct
{
    uint8_t hours;
} ble_clock_hours_t;
/**@brief MINUTES structure. */
typedef struct
{
    uint8_t minutes;
} ble_clock_minutes_t;
/**@brief SECONDS structure. */
typedef struct
{
    uint8_t seconds;
} ble_clock_seconds_t;

/**@brief CLOCK Service event. */
typedef struct
{
    ble_clock_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_clock_hours_t hours; /**< Holds decoded data in Write event handler. */
        ble_clock_minutes_t minutes; /**< Holds decoded data in Write event handler. */
        ble_clock_seconds_t seconds; /**< Holds decoded data in Write event handler. */
    } params;
} ble_clock_evt_t;

/**@brief CLOCK Service event handler type. */
typedef void (*ble_clock_evt_handler_t) (ble_clock_t * p_clock, ble_clock_evt_t * p_evt);

/**@brief CLOCK Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_clock_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the CLOCK Service. */
    ble_clock_hours_t ble_clock_hours_initial_value; /**< If not NULL, initial value of the HOURS characteristic. */ 
    ble_clock_minutes_t ble_clock_minutes_initial_value; /**< If not NULL, initial value of the MINUTES characteristic. */ 
    ble_clock_seconds_t ble_clock_seconds_initial_value; /**< If not NULL, initial value of the SECONDS characteristic. */ 
} ble_clock_init_t;

/**@brief CLOCK Service structure. This contains various status information for the service.*/
struct ble_clock_s
{
    ble_clock_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the CLOCK Service. */
    uint16_t service_handle; /**< Handle of CLOCK Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t hours_handles; /**< Handles related to the HOURS characteristic. */
    ble_gatts_char_handles_t minutes_handles; /**< Handles related to the MINUTES characteristic. */
    ble_gatts_char_handles_t seconds_handles; /**< Handles related to the SECONDS characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the CLOCK.
 *
 * @param[out]  p_clock       CLOCK Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_clock_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_clock_init(ble_clock_t * p_clock, const ble_clock_init_t * p_clock_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_clock_on_ble_evt(ble_clock_t * p_clock, ble_evt_t * p_ble_evt);

/**@brief Function for setting the HOURS.
 *
 * @details Sets a new value of the HOURS characteristic. The new value will be sent
 *          to the client the next time the client reads the HOURS characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_clock                 CLOCK Service structure.
 * @param[in]   p_hours  New HOURS.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_clock_hours_set(ble_clock_t * p_clock, ble_clock_hours_t * p_hours);

/**@brief Function for setting the MINUTES.
 *
 * @details Sets a new value of the MINUTES characteristic. The new value will be sent
 *          to the client the next time the client reads the MINUTES characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_clock                 CLOCK Service structure.
 * @param[in]   p_minutes  New MINUTES.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_clock_minutes_set(ble_clock_t * p_clock, ble_clock_minutes_t * p_minutes);

/**@brief Function for setting the SECONDS.
 *
 * @details Sets a new value of the SECONDS characteristic. The new value will be sent
 *          to the client the next time the client reads the SECONDS characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_clock                 CLOCK Service structure.
 * @param[in]   p_seconds  New SECONDS.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_clock_seconds_set(ble_clock_t * p_clock, ble_clock_seconds_t * p_seconds);

#endif //_BLE_CLOCK_H__
